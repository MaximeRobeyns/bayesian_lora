.. _server_setup:

Server Setup
------------

.. note:: The goal of this early iteration is just to ship something. This
   server is not highly available, high-performance nor very good. But it's
   shipped and it works. We'll move to K8s later.

Initial Setup
~~~~~~~~~~~~~

After setting up a new cloud box, SSH into it. Here are some steps that you
might take:

1. **Install Docker & Docker Compose**

   Installing docker can be done with the package manager:

   .. code-block:: bash

      sudo dnf update -y
      sudo dnf install docker -y

   For docker compose, we use this handy script:

   .. code-block:: bash

      sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
      sudo chmod +x /usr/local/bin/docker-compose

2. **Non-Root User Setup**

   Using the server as the root user is generally bad form. To create a new
   ``infobrief`` user with the following:

   .. code-block:: bash

      sudo adduser -m infobrief
      sudo passwd infobrief  # enter password
      sudo usermod -aG docker infobrief

   To add this user to the ``sudoers`` group, do ``sudo visudo``, and add
   ``infobrief ALL=(ALL) ALL`` at the end.

3. **Change SSH Configurations**

   First, create a new key for the infobrief user that is managed by yourself:

   .. code-block:: bash

      ssh-keygen -t ed25519 -f InfoBriefKey
      chmod 600 InfoBriefKey InfoBriefKey.pub

   Then, on the server (logged in as `infobrief`), run

   .. code-block:: bash

      mkdir ~/.ssh

    Copy in the ``InfoBriefKey.pub`` to ``~/.ssh/authorized_keys`` on the
    server. Then run

   .. code-block:: bash

      chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys

    Now, we'll update the SSH daemon configurations on the server; use ``sudo
    vim /etc/ssh/sshd_config`` to change

   .. code-block:: txt

      PasswordAuthentication no
      Port 4096
      PermitRootLogin no

   Setting the port to something other than 22 will prevent a bunch of
   brute-force attacks, particularly when running on AWS. Just make sure that
   port 4096 is open to TCP traffic on the EC2 instance.

4. **File Synchronisation with Unison**

   To install unison, make sure you've got it installed on your system. Run
   ``unison -version`` ane make a note of the OCaml version (e.g. 4.14.0) and
   the unison version (e.g. 2.53.0).

   First, make sure that you have installed OCaml on the server:

   .. code-block:: bash

       curl -LO https://github.com/ocaml/ocaml/archive/4.14.0.tar.gz
       tar xzf 4.14.0.tar.gz
       cd ocaml-4.14.0
       ./configure && make -j$(nproc) && sudo make install

   Now, install Unison

   .. code-block:: bash

       curl -LO https://github.com/bcpierce00/unison/archive/refs/tags/v2.53.0.tar.gz
       tar xzf v2.53.0.tar.gz
       cd unison-2.53.0
       make -j$(nproc)
       sudo cp src/unison /usr/local/bin

   You can now synchronise by running

   .. code-block:: bash

       #!/bin/bash

       unison -auto infobrief_deploy -logfile ~/.unison/unison.log

   Where you can created an appropriate deployment file in
    ``~/.unison/infobrief_deploy.prf``.

    .. code-block:: txt
       :linenos:
       :caption: Deployment configuration file: ``~/.unison/infobrief_deploy.prf``

       root = /home/maximerobeyns/Documents/CurrentProjects/InfoBrief/api/deployments
       root = ssh://ib/deployment

       ignore = Path logs
       ignore = Path traefik-certificates

4. **Docker Compose**

   Now, copy over the docker compose configurations and deploy as usual.
